// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  name             String?
  password         String?    // Null for Google OAuth users
  googleId         String?    @unique
  onboarded        Boolean    @default(false)
  timezone         String?
  motivationQuote  String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  habits           Habit[]
  categories       Category[]
  todos            Todo[]
}

model Habit {
  id          String       @id @default(uuid())
  title       String
  description String?
  color       String       @default("#3b82f6")
  icon        String?
  frequency   Frequency    @default(DAILY)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions Completion[]

  @@index([userId])
}

model Completion {
  id          String   @id @default(uuid())
  completedAt DateTime @default(now())
  note        String?
  habitId     String
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, completedAt])
  @@index([habitId])
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Category {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("#3b82f6")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos     Todo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Todo {
  id            String              @id @default(uuid())
  title         String
  notes         String?
  difficulty    Difficulty          @default(MEDIUM)
  dueDate       DateTime?
  completed     Boolean             @default(false)
  completedAt   DateTime?
  userId        String
  categoryId    String?
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  checklistItems TodoChecklistItem[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([userId])
  @@index([categoryId])
}

model TodoChecklistItem {
  id         String   @id @default(uuid())
  text       String
  completed  Boolean  @default(false)
  orderIndex Int
  todoId     String
  todo       Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([todoId])
}
